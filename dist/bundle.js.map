{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;AAAqC;AACY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA,mBAAmB,yDAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6CAAI;AACvB;AACA;AACA,CAAC;AACqB;;;;;;;;;;;;;;;AC7BtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACe;;;;;;;;;;;;;;;ACVhB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACqB;;;;;;;UCPtB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACkD;AAClD,qBAAqB,2DAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,yBAAyB;AAC7D,gCAAgC,cAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA","sources":["webpack://algo-labyrinte/./src/mapping/JsonMapper.ts","webpack://algo-labyrinte/./src/model/Case.ts","webpack://algo-labyrinte/./src/model/Labyrinthe.ts","webpack://algo-labyrinte/webpack/bootstrap","webpack://algo-labyrinte/webpack/runtime/define property getters","webpack://algo-labyrinte/webpack/runtime/hasOwnProperty shorthand","webpack://algo-labyrinte/webpack/runtime/make namespace object","webpack://algo-labyrinte/./src/main.ts"],"sourcesContent":["import { Case } from '../model/Case';\nimport { Labyrinthe } from '../model/Labyrinthe';\nvar JsonMapper = /** @class */ (function () {\n    function JsonMapper() {\n    }\n    JsonMapper.prototype.toLabyrinthe = function (json, size) {\n        var _size = {\n            width: size,\n            height: size,\n        };\n        var cases = [];\n        for (var i = 0; i < json.length; i++) {\n            cases.push(this.toCase(json[i]));\n        }\n        return new Labyrinthe(_size, cases);\n    };\n    JsonMapper.prototype.toCase = function (json) {\n        var entrance = json.entrance ? true : false;\n        var exit = json.exit ? true : false;\n        var walls = {\n            top: json.walls[0],\n            right: json.walls[1],\n            bottom: json.walls[2],\n            left: json.walls[3],\n        };\n        return new Case(json.posX, json.posY, walls, exit, entrance);\n    };\n    return JsonMapper;\n}());\nexport { JsonMapper };\n","var Case = /** @class */ (function () {\n    function Case(posX, posY, walls, exit, entrance) {\n        this.posX = posX;\n        this.posY = posY;\n        this.walls = walls;\n        this.exit = exit;\n        this.entrance = entrance;\n    }\n    return Case;\n}());\nexport { Case };\n","var Labyrinthe = /** @class */ (function () {\n    function Labyrinthe(size, cases) {\n        this.size = size;\n        this.cases = cases;\n    }\n    return Labyrinthe;\n}());\nexport { Labyrinthe };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Programme de génération et completion de labyrinthe\n *\n * Notes:\n *\n * Quelques idées pour le type de data structure à utiliser pour les cases du labyrinthe:\n *\n */\nimport { JsonMapper } from \"./mapping/JsonMapper\";\nvar jsonMapper = new JsonMapper();\nvar htmlElements = {\n    tableau: document.getElementById(\"tableauLabyrinthe\"),\n};\nvar labyrintheElementsTemplates = {\n    case: '<td class=\"case %class%\"></td>',\n};\nfunction getClassesFromCase(case_) {\n    var classes = [];\n    classes.push(case_.walls.top ? \"mur-haut\" : \"\");\n    classes.push(case_.walls.right ? \"mur-droit\" : \"\");\n    classes.push(case_.walls.bottom ? \"mur-bas\" : \"\");\n    classes.push(case_.walls.left ? \"mur-gauche\" : \"\");\n    classes.push(case_.exit ? \"sortie\" : \"\");\n    classes.push(case_.entrance ? \"entree\" : \"\");\n    return classes.join(\" \");\n}\nfunction displayLabyrinthe(labyrinthe) {\n    var size = labyrinthe.size;\n    var cases = labyrinthe.cases;\n    var html = \"<table>\";\n    for (var i = 0; i < size.height; i++) {\n        html += \"<tr>\";\n        for (var j = 0; j < size.width; j++) {\n            var index = i * size.width + j;\n            var case_ = cases[index];\n            html += labyrintheElementsTemplates.case.replace(\"%class%\", getClassesFromCase(case_));\n        }\n        html += \"</tr>\";\n    }\n    html += \"</table>\";\n    htmlElements.tableau.innerHTML = html;\n}\nfunction getJsonDataFromAPI() {\n    return fetch(\"http://localhost:3000/15\")\n        .then(function (response) { return response.json(); })\n        .then(function (json) { return json; });\n}\nfunction main() {\n    var data = getJsonDataFromAPI();\n    data.then(function (json) {\n        var labyrinthe = jsonMapper.toLabyrinthe(json[\"ex-0\"], 15);\n        displayLabyrinthe(labyrinthe);\n    });\n}\nmain();\n"],"names":[],"sourceRoot":""}